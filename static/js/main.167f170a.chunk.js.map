{"version":3,"sources":["todobanner.jsx","todorow.jsx","todocreator.jsx","visibilitycontrol.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","render","className","props","name","tasks","filter","t","done","length","React","Component","TodoRow","this","item","action","type","checked","onChange","callback","TodoCreator","updateNewTextValue","e","setState","newItemText","target","value","createNewTodo","state","onClick","VisibilityControl","description","App","event","task","console","log","todoItems","find","localStorage","setItem","JSON","stringify","toggleTodo","todo","map","todoTableRows","doneValue","key","componentDidMount","data","getItem","parse","userName","showCompleted","isChecked","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.167f170a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class TodoBanner extends React.Component{\r\n    render=()=>\r\n    <h4 className=\"bg-primary text-white text-center p-2\">\r\n        {this.props.name}'s Todo List'\r\n        ({this.props.tasks.filter(t=>!t.done).length} items to do)\r\n    </h4>\r\n\r\n}","import React from 'react';\r\n\r\nexport class TodoRow extends React.Component{\r\n    render(){\r\n   return( <tr>\r\n        <td>{this.props.item.action}</td>\r\n        <td><input type=\"checkbox\" checked={this.props.item.done}\r\n                onChange={()=>{this.props.callback(this.props.item)}}/></td>\r\n    </tr>)\r\n    }\r\n}","import React from 'react';\r\n\r\nexport class TodoCreator extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            newItemText:\"\"\r\n        }\r\n    }\r\n    updateNewTextValue=(e)=>{\r\n        this.setState({newItemText:e.target.value})\r\n    }\r\n    createNewTodo=()=>{\r\n        this.props.callback(this.state.newItemText)\r\n        this.setState({newItemText:\"\"})\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"my-1\">\r\n                <input type=\"text\" className=\"form-control\"\r\n                value={this.state.newItemText}\r\n                onChange={this.updateNewTextValue}/>\r\n                <button className=\"btn btn-primary mt-1\" onClick={this.createNewTodo}>\r\n                    Add\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nexport class VisibilityControl extends React.Component{\r\n    render=()=>\r\n    <div className=\"form-check\">\r\n        <input type=\"checkbox\" className=\"form-check-input\"\r\n        onChange={(e)=>this.props.callback(e.target.checked)}/>\r\n        <label className=\"form-check-label\">\r\n            Show {this.props.description}\r\n        </label>\r\n    </div>\r\n}","import React from 'react';\nimport {TodoBanner} from './todobanner';\nimport{TodoRow} from './todorow';\nimport {TodoCreator} from './todocreator';\nimport {VisibilityControl} from './visibilitycontrol'\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      userName:\"Hari krishnan\",\n      \"todoItems\":[{action:\"Buy Flowers\",done:false},\n      {action:\"Get Shoes\",done:false},\n      {action:\"Collect Tickets\",done:false},\n      {action:\"Call Joe\",done:false}\n    ],\n    showCompleted:true\n    }\n  }\n  updateNewTextValue=(event)=>{\n    this.setState({newItemText:event.target.value})\n  }\n\n  createNewTodo=(task)=>{\n    console.log(task)\n    if(!this.state.todoItems.find(item=>{\n      console.log(item)\n      return item.action===task})){\n      this.setState({todoItems:[...this.state.todoItems,{action:task,done:false}]},()=>localStorage.setItem('todos',JSON.stringify(this.state)))\n    }\n  }\n  toggleTodo=(todo)=>this.setState({todoItems:this.state.todoItems.map(item=>item.action===todo.action?{action:item.action,done:!item.done}:item)},()=>localStorage.setItem('todos',JSON.stringify(this.state)));\n\n  todoTableRows=(doneValue)=>{\n    console.log(doneValue)\n    return this.state.todoItems.filter(item=>item.done===doneValue).map(item=>\n    <TodoRow key={item.action} item={item} callback={this.toggleTodo}/>)}\n  \n    componentDidMount=()=>{\n      let data=localStorage.getItem(\"todos\");\n      this.setState(data!=null?JSON.parse(data):{\n        userName:\"Hari krishnan\",\n        \"todoItems\":[{action:\"Buy Flowers\",done:false},\n        {action:\"Get Shoes\",done:false},\n        {action:\"Collect Tickets\",done:false},\n        {action:\"Call Joe\",done:false}\n      ],\n      showCompleted:false\n      })\n\n    }\n  render(){\n    return(\n    <div className=\"container\">\n      <TodoBanner name={this.state.userName} tasks={this.state.todoItems} />\n      <div className=\"container-fluid\">\n        <TodoCreator callback={(task)=>this.createNewTodo(task)}  />\n        <table className=\"table table-striped table-bordered\">\n          <thead>\n              <tr>\n                <th>Description</th><th>Done</th>\n              </tr>\n          </thead>\n          <tbody>\n            {this.todoTableRows(false)}\n          </tbody>\n        </table>\n        <div className=\"bg-secondary text-white text-center p-2\">\n          <VisibilityControl description=\"Completed Tasks\"     \n          isChecked={this.state.showCompleted}\n          callback={(checked)=>this.setState({showCompleted:checked})} />\n        </div>\n        {\n          this.state.showCompleted&&\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr><th>Description</th><th>Done</th></tr>\n            </thead>\n            <tbody>\n              {this.todoTableRows(true)}\n            </tbody>\n          </table>\n        }\n      </div>\n    </div>)\n  }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}